openapi: 3.0.1
info:
  title: User API
  description: User microservice. Detailed description of the Api.
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: //localhost:9100/
tags:
  - name: home-controller
    description: Home Controller
  - name: user-api-controller
    description: the User API
paths:
  /:
    get:
      tags:
        - home-controller
      summary: index
      operationId: indexUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
        - JWT:
            - global
  /authenticate:
    post:
      tags:
        - Users
      summary: Authenticate
      description: ' .'
      operationId: authenticate
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequest'
        required: true
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        201:
          description: Created
          content: {}
        400:
          description: Invalid User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
      x-codegen-request-body-name: authenticationRequest
  /config:
    get:
      tags:
        - home-controller
      summary: config
      operationId: configUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
        - JWT:
            - global
  /healthcheck:
    get:
      tags:
        - home-controller
      summary: healthcheck
      operationId: healthcheckUsingGET
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      security:
        - JWT:
            - global
  /users:
    get:
      tags:
        - Users
      summary: Get all Users.
      description: Returns all Users.
      operationId: getAllUsers
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
    put:
      tags:
        - Users
      summary: Update an existing User.
      description: Takes an existing User, updates it, and returns the new object.
      operationId: updateUsers
      requestBody:
        description: User object to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        201:
          description: Created
          content: {}
        400:
          description: Invalid User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
      x-codegen-request-body-name: body
    post:
      tags:
        - Users
      summary: Add a new User.
      description: Takes a User object, saves it, and returns it with the saved id.
      operationId: addUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        201:
          description: Created
          content: {}
        400:
          description: Invalid User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
      x-codegen-request-body-name: body
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a User by id.
      description: Returns one User by id.
      operationId: getUsersByID
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
    delete:
      tags:
        - Users
      summary: Delete an existing User by id.
      description: Takes an existing User, deletes it, and returns the new object.
      operationId: deleteUsers
      parameters:
        - name: id
          in: path
          description: User object to update.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
        - JWT:
            - global
components:
  schemas:
    Error:
      title: Error
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
    JwtRequest:
      title: JwtRequest
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    JwtResponse:
      title: JwtResponse
      type: object
      properties:
        token:
          type: string
    StackTraceElement:
      title: StackTraceElement
      type: object
      properties:
        classLoaderName:
          type: string
        className:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        methodName:
          type: string
        moduleName:
          type: string
        moduleVersion:
          type: string
        nativeMethod:
          type: boolean
    Throwable:
      title: Throwable
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        disabled:
          type: boolean
          description: Indicates if this master data has been disabled.
          example: false
        modified:
          type: string
          description: Field provided by server.
          format: date-time
          example: 2021-02-25T15:46:13.824Z
        created:
          type: string
          description: Field provided by server.
          format: date-time
          example: 2021-02-25T15:46:13.824Z
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
